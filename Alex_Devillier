My goal is to implement OSC (open sound control) in a project.

The project I have in mind will read an online world birth/death clock.
Convert that number into some kind of musical note.
Use OSC to send that note in an OSC message to some program/device to play the note.

Mid-point goal: Obtain world clock data into program and convert to musical note.
Wrap in OSC message.

Final goal: From there it's a matter of setting up a receiver to parse and play the note(s).



Development Strategy: I intend to use java to look up birth/death information from 
"http://www.census.gov/popclock/", parse that data into musical values, Pd-extended 
to play the music notes at those values, and OSC to communicate between the two.

Data will flow in this direction:
"http://www.census.gov/popclock/" --> java application -OSC-> Pd-extended

Java classes:
Main.java
ClockDataRetriever.java
MusicDataParser.java

Java libraries
JavaOSC

Pd file construction:
OSC receiver
frequency oscililators
digital to audio convertor


+-----------------------------+
| ClockDataRetriever.java:    |
+-----------------------------+
|  JsonParserFactory factory; |
|  JSONParser parser;         |
|  String jsonString;         |
|  int birthRate;             |
|  int deathRate;             |
|  URL worldClockPage;        |
|-----------------------------+
|  void retreiveClockData();  |
|  int getBirthRate();        |
|  int getDeathRate();        |
+-----------------------------+

+-------------------------------------------+
| Main.java:                                |
+-------------------------------------------+
|  TimerTask birthTimerTask;                |
|  Timer birthTimer;                        |
|  TimerTask deathTimerTask;                |
|  Timer deathTimer;                        |
|  ClockDataRetriever clockDataRetriever;   |
|-------------------------------------------+
|  int nextBirthNote();                     |
|  int nextBirthChord();                    |
|  int nextDeathNote();                     |
|  int nextDeathChord();                    |
|  static void main(String[] args);         |
+-------------------------------------------+

+-----------------------------------+
| MusicaDataParser.java:            |
+-----------------------------------+
|  static final int[] cMajorScale;  |
|  static final int[] cMinorScale;  |
|  static final int SCALE_SIZE;     |
|  int bCursor;                     |
|  int dCursor;                     |
+-----------------------------------+
|  static int nextBirthNote();      |
|  static int nextDeathNote();      |
+-----------------------------------+

Programming Journal

November 12, 2013:

	I want to do something using OSC (open sound control) so I researched what systems have OSC built-in or have libraries to support it. Some possible options for me are Java, PHP, Python, Pure Data, Ruby, Arduino, and iPhone.

November 17, 2013:

	I’m trying to design something to auralize some data. I’ve chosen to represent the US birth and death rates from http://www.census.gov/popclock/. Java has a JavaOSC library so I will use that to send data. Pure Data is a visual programming language that can easily generate sound and it has OSC built-in. I will use these two systems to send OSC messages between.

November 19, 2013:

	I have a java program started and have figured out how to parse through the JSON data from the census clock website (which was hard enough to find) to extract the birth and death rates per second in the US.

November 25, 2013:

	Although I knew it what Pure Data did. I did not know much about how to use it. I’ve now got a stand-alone Pure Data program that will play any midi note that’s placed in the box at the top of the patch.

December 1, 2013:

	Over the past week I’ve managed to set up a simple loop through the midi notes for an ascending C major scale and a descending C minor scale for births and deaths to play respectively at their respective rates in the java program. I route them with an OSC message with a “/birth” and “/death” path respectively.
	
December 10, 2013:

	I updated the java program to send major or minor chords for a user entered number of births or deaths respectively. The pd file was also updated to play single notes instead of held out notes and expanded to handle chords.
	
